package com.crimson.picshu.login_signup;import android.Manifest;import android.app.AlertDialog;import android.app.ProgressDialog;import android.content.DialogInterface;import android.content.Intent;import android.content.pm.PackageManager;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.provider.Settings;import android.support.annotation.NonNull;import android.support.v4.app.ActivityCompat;import android.support.v7.app.AppCompatActivity;import android.text.TextUtils;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.view.inputmethod.EditorInfo;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.crimson.picshu.R;import com.crimson.picshu.gateway.AppPreference;import com.crimson.picshu.utils.ApiRequest;import com.crimson.picshu.utils.ConnectionCheck;import com.crimson.picshu.utils.UserSessionManager;import com.crimson.picshu.utils.Utility;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.regex.Matcher;import java.util.regex.Pattern;import retrofit.Callback;import retrofit.RestAdapter;import retrofit.RetrofitError;import retrofit.client.Response;public class OtpGenerateActivity extends AppCompatActivity {    EditText phone;    TextView contin;    ProgressDialog progressDialog;    UserSessionManager sessionManager;    int PERMISSION_ALL = 1;    String[] PERMISSIONS = {Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE};    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_otp_generate);        if (!hasPermissions(this, PERMISSIONS)) {            ActivityCompat.requestPermissions(this, PERMISSIONS, PERMISSION_ALL);        }        phone = findViewById(R.id.et_mobile);        contin = findViewById(R.id.txt_continue);        sessionManager = new UserSessionManager(this);        phone.setOnEditorActionListener(new TextView.OnEditorActionListener() {            @Override            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {                boolean handled = false;                if (actionId == EditorInfo.IME_ACTION_DONE) {                    if (validateDetails(phone.getText().toString())) {                        if (new ConnectionCheck(OtpGenerateActivity.this).isNetworkAvailable())                            SendData((phone.getText().toString()));                        else                            Toast.makeText(OtpGenerateActivity.this, "Please Check Your Internet Connection", Toast.LENGTH_SHORT).show();                    }                    handled = true;                }                return handled;            }        });        contin.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                //////////                if (validateDetails(phone.getText().toString())) {                    if (new ConnectionCheck(OtpGenerateActivity.this).isNetworkAvailable())                        SendData((phone.getText().toString()));                    else                        Toast.makeText(OtpGenerateActivity.this, "Please Check Your Internet Connection", Toast.LENGTH_SHORT).show();                }                /////////            }        });    }    private boolean hasPermissions(OtpGenerateActivity context, String[] permissions) {        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && context != null && permissions != null) {            for (String permission : permissions) {                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {                    return false;                }            }        }        return true;    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        // login_btn.setOnClickListener( null );        // register_btn.setOnClickListener( null );        if (permissions.length == 0) {            return;        }        boolean allPermissionsGranted = true;        if (grantResults.length > 0) {            for (int grantResult : grantResults) {                if (grantResult != PackageManager.PERMISSION_GRANTED) {                    allPermissionsGranted = false;                    break;                }            }        }        if (!allPermissionsGranted) {            boolean somePermissionsForeverDenied = false;            for (String permission : permissions) {                if (ActivityCompat.shouldShowRequestPermissionRationale(this, permission)) {                    //denied                    Toast.makeText(getApplicationContext(), "Please allow required permission", Toast.LENGTH_LONG).show();                    Log.e("denied", permission);                } else {                    if (ActivityCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED) {                        //allowed                        Log.e("allowed", permission);                    } else {                        //set to never ask again                        //Toast.makeText( getApplicationContext(),"set to never ask again",Toast.LENGTH_LONG ).show();                        Log.e("set to never ask again", permission);                        somePermissionsForeverDenied = true;                    }                }            }            if (somePermissionsForeverDenied) {                final AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);                alertDialogBuilder.setTitle("Permissions Required")                        .setMessage("You have forcefully denied some of the required permissions " +                                "for this action. Please open settings, go to permissions and allow them.")                        .setPositiveButton("Settings", new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,                                        Uri.fromParts("package", getPackageName(), null));                                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);                                startActivity(intent);                            }                        })                        .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                // System.runFinalizersOnExit(true);                                //android.os.Process.killProcess(android.os.Process.myPid());                            }                        })                        .setCancelable(false)                        .create()                        .show();            }        }    }    public void SendData(String phoneNo) {        RestAdapter restAdapter = new RestAdapter.Builder().setEndpoint(Utility.url).build();        ApiRequest apiRequest = restAdapter.create(ApiRequest.class);        progressDialog = new ProgressDialog(OtpGenerateActivity.this, R.style.AppCompatProgressDialogStyle);        progressDialog.setCancelable(false);        progressDialog.setMessage("Loading...");        progressDialog.show();        apiRequest.createProfile("" + phoneNo, new Callback<Response>() {            @Override            public void success(Response result, Response response) {                BufferedReader bufferedReader = null;                String output = "";                try {                    bufferedReader = new BufferedReader(new InputStreamReader(result.getBody().in()));                    output = bufferedReader.readLine();                    progressDialog.dismiss();                    JSONObject object = new JSONObject(output);                    Log.d("TAG111", "" + output);                    String userid = object.optString("user_id");                    String books = object.getString("books");                    int flag = object.optInt("flag");                    Log.d("TAG111", "uID--" + userid + "--uFLAG--" + flag + "--books--" + books);                    Intent intent = new Intent(OtpGenerateActivity.this, OtpVerifyActivity.class);                    intent.putExtra("user_id", "" + userid);                    intent.putExtra("phone", "" + phone.getText().toString());                    sendFCMToken("" + userid);                    if (flag == 0) {                        SavingData(flag, phoneNo);                        startActivity(intent);                    } else {                        String name = object.optString("name");                        String email = object.optString("email");                        String address = object.optString("address");                        String deliveryAddress = object.optString("delivery_address");                        sessionManager.setProfileUrl(object.optString("photo"));                        SavingData(flag, books, phoneNo, name, email, address, deliveryAddress);                        startActivity(intent);                    }                    //Toast.makeText(OtpGenerateActivity.this, "Otp Verified", Toast.LENGTH_SHORT).show();                } catch (IOException e) {                    e.printStackTrace();                } catch (JSONException e) {                    e.printStackTrace();                }                finish();            }            @Override            public void failure(RetrofitError error) {                progressDialog.dismiss();                Toast.makeText(OtpGenerateActivity.this, "Server Error", Toast.LENGTH_SHORT).show();                Log.e("error", "--->" + error.getLocalizedMessage());            }        });    }    private void sendFCMToken(String userID) {        RestAdapter restAdapter = new RestAdapter.Builder().setEndpoint(Utility.url).build();        ApiRequest apiRequest = restAdapter.create(ApiRequest.class);        apiRequest.sendFCMToken(userID,                sessionManager.getToken(), new Callback<Response>() {                    @Override                    public void success(Response result, Response response) {                        BufferedReader bufferedReader = null;                        String output = "";                        try {                            bufferedReader = new BufferedReader(new InputStreamReader(result.getBody().in()));                            output = bufferedReader.readLine();                            JSONObject object = new JSONObject(output);                            //Toast.makeText(OtpGenerateActivity.this, "Otp Verified", Toast.LENGTH_SHORT).show();                        } catch (IOException e) {                            e.printStackTrace();                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                    @Override                    public void failure(RetrofitError error) {                        Log.e("error", "--->" + error.getLocalizedMessage());                    }                });    }    public void SavingData(int flag, String phoneNo) {        sessionManager.setFlag(flag);        sessionManager.setPhone(phoneNo);    }    public void SavingData(int flag, String books, String phoneNo, String name, String email, String userAddress, String deliveryAddress) {        // sessionManager.setUserId(userId);        try {            sessionManager.setFlag(flag);            sessionManager.setBookCount(Integer.parseInt(books));            sessionManager.setUserName(name);            sessionManager.setPhone(phoneNo);            sessionManager.setUserEmail(email);            sessionManager.setUserAddress(userAddress);            sessionManager.setDeliveryAddress(deliveryAddress);            ArrayList<Integer> userAddressIndexes = new ArrayList<>();            for (int i = 0; i < userAddress.length(); i++) {                if (userAddress.charAt(i) == ',') {                    userAddressIndexes.add(i);                }            }            ArrayList<Integer> deliveryAddressIndexes = new ArrayList<>();            for (int i = 0; i < deliveryAddress.length(); i++) {                if (deliveryAddress.charAt(i) == ',') {                    deliveryAddressIndexes.add(i);                }            }            sessionManager.setUserPincode(userAddress.substring(userAddress.lastIndexOf(",") + 2));            sessionManager.setUserCityState(userAddress.substring(userAddressIndexes.get((userAddressIndexes.size() - 3)) + 2, userAddressIndexes.get(userAddressIndexes.size() - 1)));            sessionManager.setUserLandmark(userAddress.substring(userAddressIndexes.get((userAddressIndexes.size() - 4)) + 2, userAddressIndexes.get(userAddressIndexes.size() - 3)));            sessionManager.setUserHouse(userAddress.substring(0, userAddressIndexes.get(userAddressIndexes.size() - 4)));            sessionManager.setDeliveryPincode(deliveryAddress.substring(deliveryAddress.lastIndexOf(",") + 2));            sessionManager.setDeliveryCityState(deliveryAddress.substring(deliveryAddressIndexes.get((deliveryAddressIndexes.size() - 3)) + 2, deliveryAddressIndexes.get(deliveryAddressIndexes.size() - 1)));            sessionManager.setDeliveryLandmark(deliveryAddress.substring(deliveryAddressIndexes.get((deliveryAddressIndexes.size() - 4)) + 2, deliveryAddressIndexes.get(deliveryAddressIndexes.size() - 3)));            sessionManager.setDeliveryHouse(deliveryAddress.substring(0, deliveryAddressIndexes.get(deliveryAddressIndexes.size() - 4)));        } catch (Exception e) {            e.printStackTrace();        }    }    public boolean validateDetails(String mobile) {        mobile = mobile.trim();        if (TextUtils.isEmpty(mobile)) {            setErrorInputLayout(phone, getString(R.string.err_phone_empty));            return false;        } else if (!isValidPhone(mobile)) {            setErrorInputLayout(phone, getString(R.string.err_phone_not_valid));            return false;        } else            return true;    }    public static void setErrorInputLayout(TextView editText, String msg) {        editText.setError(msg);        editText.requestFocus();    }    public static boolean isValidPhone(String phone) {        Pattern pattern = Pattern.compile(AppPreference.PHONE_PATTERN);        Matcher matcher = pattern.matcher(phone);        return matcher.matches();    }}